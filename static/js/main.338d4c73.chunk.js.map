{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","cats","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestCats","searchField","onSearchChange","isPending","filteredCats","filter","cat","toLowerCase","includes","connect","searchCats","requestCats","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateCats","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"sSAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACI,yBAAKC,UAAU,uDACjB,yBAAKC,IAAI,SAASC,IAAG,wCAAmCH,EAAnC,mBACrB,6BACC,4BAAKF,GACL,2BAAIC,MCcOK,EAnBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAChB,OACI,6BAEQA,EAAKC,KAAI,SAACC,EAAMC,GACZ,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIK,EAAKG,GAAGR,GACZF,KAAMO,EAAKG,GAAGV,KACdC,MAAOM,EAAKG,GAAGT,aCE5BW,EAbG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,qBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCiBJC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,wDAEJG,KAAKX,MAAMK,a,GAhBEQ,aCwBtBC,G,wLAEEH,KAAKX,MAAMe,kB,+BAGL,IAAD,EACoDJ,KAAKX,MAAtDgB,EADH,EACGA,YAA6B5B,GADhC,EACgB6B,eADhB,EACgC7B,MAAM8B,EADtC,EACsCA,UACrCC,EAAe/B,EAAKgC,QAAO,SAAAC,GAC7B,OAAOA,EAAIxC,KAAKyC,cAAcC,SAASP,EAAYM,kBAEvD,OAAOJ,EACP,uCAEI,yBAAKlC,UAAU,MACX,wBAAIA,UAAU,MAAd,uBACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKM,iBAE9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU7B,KAAM+B,W,GAnBtBN,cA2BHW,eA3CS,SAAAjB,GACpB,MAAO,CACHS,YAAaT,EAAMkB,WAAWT,YAC9B5B,KAAMmB,EAAMmB,YAAYtC,KACxB8B,UAAWX,EAAMmB,YAAYR,UAC7BT,MAAOF,EAAMmB,YAAYjB,UAIN,SAACkB,GACxB,MAAO,CACHV,eAAgB,SAACW,GAAD,OAAWD,ECdM,CACrC/B,KCR+B,sBDS/BiC,QDYuDD,EAAME,OAAOC,SAChEhB,cAAe,kBAAMY,GCVI,SAACA,GAChCA,EAAS,CAAE/B,KCXuB,yBDYlCoC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAE/B,KCbO,uBDaqBiC,QAASO,OAC7DC,OAAM,SAAA5B,GAAK,OAAIkB,EAAS,CAAE/B,KCbI,sBDauBiC,QAASpB,cDoCpDe,CAA6CV,GGzCxCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAqB,CACzB3B,YAAa,IAYT4B,EAAmB,CACvB1B,WAAW,EACX9B,KAAM,GACNqB,MAAO,ICXHoC,G,MAASC,0BAETC,EAAcC,YAAgB,CAAEvB,WDHZ,WAA0C,IAAzClB,EAAwC,uDAAlCoC,EAAoBM,EAAc,uDAAP,GAC1D,OAAOA,EAAOrD,MACZ,IFb+B,sBEc7B,OAAOsD,OAAOC,OAAO,GAAI5C,EAAO,CAAES,YAAaiC,EAAOpB,UACxD,QACE,OAAOtB,ICFqCmB,YDYvB,WAAwC,IAAvCnB,EAAsC,uDAAhCqC,EAAkBK,EAAc,uDAAP,GACzD,OAAOA,EAAOrD,MACZ,IF1BgC,uBE2B9B,OAAOsD,OAAOC,OAAO,GAAI5C,EAAO,CAAEW,WAAW,IAC/C,IF3BgC,uBE4B9B,OAAOgC,OAAOC,OAAO,GAAI5C,EAAO,CAAEnB,KAAM6D,EAAOpB,QAASX,WAAW,IACrE,IF5B+B,sBE6B7B,OAAOgC,OAAOC,OAAO,GAAI5C,EAAO,CAAEE,MAAOwC,EAAOpB,QAASX,WAAW,IACtE,QACE,OAAOX,MCpBP6C,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAExEW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SF4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd5B,OAAM,SAAA5B,GACLyD,QAAQzD,MAAMA,EAAM0D,c","file":"static/js/main.338d4c73.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\treturn (\n    \t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/set_set4/${id}?size=200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ cats }) => {\n    return (\n        <div>\n            {\n                cats.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={cats[i].id}\n                            name={cats[i].name}\n                            email={cats[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='Search cat friends'\n                onChange={searchChange} \n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nimport  { setSearchField, requestCats } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchCats.searchField,\n        cats: state.requestCats.cats,\n        isPending: state.requestCats.isPending,\n        error: state.requestCats.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestCats: () => dispatch(requestCats())\n    }\n}\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestCats();\n    }\n\n    render() {\n        const { searchField, onSearchChange, cats, isPending } = this.props;\n        const filteredCats = cats.filter(cat => {\n            return cat.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return isPending ? \n        <h1>Loading</h1> :\n        (\n            <div className='tc'>\n                <h1 className='f1'>Cool Cats & Kittens</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList cats={filteredCats}/>\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_CATS_PENDING,\n  REQUEST_CATS_SUCCESS,\n  REQUEST_CATS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestCats = () => (dispatch) => {\n  dispatch({ type: REQUEST_CATS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_CATS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_CATS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_CATS_PENDING = 'REQUEST_CATS_PENDING';\nexport const REQUEST_CATS_SUCCESS = 'REQUEST_CATS_SUCCESS';\nexport const REQUEST_CATS_FAILED = 'REQUEST_CATS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_CATS_PENDING,\n  REQUEST_CATS_SUCCESS,\n  REQUEST_CATS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchCats = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n}\n\nconst initialStateCats = {\n  isPending: false,\n  cats: [],\n  error: ''\n}\n\nexport const requestCats = (state=initialStateCats, action={}) => {\n  switch(action.type) {\n    case REQUEST_CATS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case REQUEST_CATS_SUCCESS:\n      return Object.assign({}, state, { cats: action.payload, isPending: false })\n    case REQUEST_CATS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false })\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchCats, requestCats } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchCats, requestCats });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}